Q:  The Scala compiler transforms a for/yield expression

        for(i <- 1 to 10; j <- 1 to i) yield i * j

    to invocations of flatMap and map, like this:

        (1 to 10).flatMap(i => (1 to i).map(j => i * j))

    Explain the use of flatMap. Hint: What is (1 to i).map(j => i * j) when i is 1, 2, 3?
    What happens when there are three generators in the for/yield expression?

A:  When i is 1, 2, 3, (1 to i).map(j => i * j) will return a Collection (a Vector). As such, flatMap is required here:
    if it were'nt for flatMap, we'd end up with a collection of collection (like Vector[Vector[A]]) instead of a flat
    collection (like Vector[A]).
    If there were three generators, the first two generators would be turned into flatMap invocation and the last one
    would be turned into a map invocation.